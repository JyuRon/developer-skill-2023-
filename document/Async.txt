(1) ThreadPoolTaskExecutor 인자 설명
- corePoolSize : 1개의 pool 에 최소 몇개의 thread 를 소유할것인지 설정, 일을 하던 안하던 리소스 점유
    corePoolSize 값을 너무 크게 설저할 경우 side effect 고려해보기
- maximumPullSize : 1개의 pool 에 소유가능한 최대 thread의 수
- keepAliveTime : corePoolSize 보다 많은 thread가 할당되었을때 지정한 시간만큼 일을 하지 않으면 자원을 반납
- unit : keepAliveTime의 시, 분, 초의 단위를 지정
- workQueue : 요청을 대기시키는 공간, 순차적으로 task를 가져옴

(2) ThreadPoolTaskExecutor 동작 순서
- corePoolSize=3, maximumPullSize = 10떄 request 가 4개가 들어왔다.
    1) corePoolSize 만큼 request 3개를 할당
    2) 나머지 1개의 request를 위해 thread 생성을 하는 것이 아닌 queue에 대기
    3) workQueue의 크기만큼 request가 차게 되면 이제서야 새로운 maximumPullSize 만큼 thread를 생성
    4) queue, thread도 포화상태이면 exception 발생 -> 요청, 거절등의 핸들링 필요

(3) ThreadPoolTaskExecutor 예외 발생 상황
- corePoolSize < 0
- keepAliveTime < 0
- maximumPoolSize <= 0
- maximumPoolSize < corePoolSize
- workQueue is null

(4) @Bean(name = "defaultTaskExecutor", destroyMethod = "shutdown")
- destroyMethod : thread pool 을 정의를 하였을떄 의도치 않게 해당 빈이 정의 되지 않을 경우를 방지
- https://velog.io/@minwest/Spring-%EB%B9%88-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EC%BD%9C%EB%B0%B1


(5) SpringFramework Async 적용 순서
- XXXConfig : @Configuration, @EnableAsync 추가
- ThreadPoolTaskExecutor 빈 등록
    @Bean(name = "defaultTaskExecutor", destroyMethod = "shutdown")
    public ThreadPoolTaskExecutor defaultTaskExecutor(){
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(200);
        executor.setMaxPoolSize(300);
        return executor;
    }

- Async에 사용할 ThreadPool 정의
    // @Async 사용시 public 으로 설정해야 한다.
    @Async("defaultTaskExecutor")
    public void sendMail(){
        System.out.println("[sendMail] :: " + Thread.currentThread().getName());
    }


(6) Bean 과 Async 의 관계

비동기로 동작하기 위해서는 SpringFramework 의 도움의 필요하다.
여기서 Spring 의 도움이란 async 하게 동작하기 위해서는 Sub Thread 에게 위임하는 과정이 필요한데 이때
순수한 Bean 객체를 가져오는 것이 아닌 Proxy 객체로 Wrapping 된 객체를 반환해야 한다.
즉 AsyncService 에 사용되는 EmailService 는 Spring 의 도움을 받은 Proxy 객체를 사용하게 된다.
추가로 자기 자신 안에 @Async 메소드가 존재하는 경우 proxy 객체가 아닌 자기 자신을 direct 로 참조하기 때문에 이 또한 Async 동작이 이루어 지지 않는다.
asyncCall_2 의 경우 spring 에 등록된 빈이 아닌 인스턴스를 생성하여 비동기 실행 안됨
asyncCall_3 해당 빈 안에 다이렉트로 접근하게 되는 과정이기 때문에 wrapping 객체를 받아오지 않용